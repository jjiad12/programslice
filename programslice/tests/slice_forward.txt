Slicing
=======

The definition of slicing is split into forward and backwards slicing:
using both methods together and we get a full slice. Currently only
forward slicing is implemented which returns all line numbers depending
on the current line number.

..  note:: Weiser style slicing defines a slice criterion with a
    statement and a subset of variables. This is currently not supported.

Slicing Forward
---------------

Given a simple program:

>>> program = u"""
... def main():
...     foo = 1
...     bar = 1
...     baz = foo + bar
...     print baz
... 
... if __name__ == "__main__":
...     main()
... """

To see which lines depend on line 3, use the :py:meth:`slice_string` method:

>>> from programslice import slice_string
>>> slice_string(3, program, 'myprogram')
[3, 5, 6]

Inverted Result
---------------

If we want to see all lines which **not depend** on line 3 set
``invert=True``:

>>> slice_string(3, program, 'mypogram', invert=True)
[2, 4]

Shebangs and Encoding declarations
----------------------------------

Sometimes programs use encoding declarations, which need to removed
before the program can be parsed. The slicing will happen nevertheless:

>>> encprogram = u'#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n{program}'.format(program=program)
>>> slice_string(4, encprogram, 'myprogram')
[4, 6, 7]
>>> encprogram = u'#!/usr/bin/env python\n#\n# vim: set fileencoding=utf-8 :\n{program}'.format(program=program)
>>> slice_string(5, encprogram, 'myprogram')
[5, 7, 8]

Text Output
-----------

Instead of returning line numbers, we can filter the buffer as well. The
`slice_string` function can be given a custom formatter class. It
defaults to :py:class:`LineFormatter` to just render the line numbers:

>>> from programslice.formatter import TextOutputFormatter
>>> result = slice_string(4, program, 'myprogram', formatter=TextOutputFormatter)
>>> print u'\n'.join(result)
bar = 1
baz = foo + bar
print baz

The text output an also be inverted:

>>> result = slice_string(
...     4, program, 'myprogram', invert=True, formatter=TextOutputFormatter)
>>> print u'\n'.join(result)
def main():
    foo = 1
